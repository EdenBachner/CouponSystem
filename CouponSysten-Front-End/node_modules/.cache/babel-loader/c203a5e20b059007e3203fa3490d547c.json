{"ast":null,"code":"import axios from 'axios'; // Add a request interceptor\n\naxios.interceptors.request.use(config => {\n  const user = JSON.parse(localStorage.getItem('user'));\n\n  if (user && user.accessToken) {\n    const token = 'Bearer ' + user.accessToken;\n    config.headers.Authorization = token;\n  }\n\n  return config;\n});\n\nclass BackendService {\n  async getUserBoard() {\n    return await axios.get(\"/api/test/user\"); //return await axios.get(\"/api/test/customer\");\n  }\n\n  async getPmBoard() {\n    return await axios.get(\"/api/test/pm\"); //return await axios.get(\"/api/test/company\");\n  }\n\n  async getAdminBoard() {\n    return await axios.get(\"/api/test/admin\"); //return await axios.get(\"/api/test/admin\");\n  }\n\n}\n\nexport default new BackendService();","map":{"version":3,"sources":["/Users/eden_bachner/Full stack java/web/React/reactjs-jwt-authen 2/src/app/services/BackendService.js"],"names":["axios","interceptors","request","use","config","user","JSON","parse","localStorage","getItem","accessToken","token","headers","Authorization","BackendService","getUserBoard","get","getPmBoard","getAdminBoard"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACAA,KAAK,CAACC,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAAgCC,MAAM,IAAI;AACxC,QAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAb;;AAEA,MAAGJ,IAAI,IAAIA,IAAI,CAACK,WAAhB,EAA4B;AAC1B,UAAMC,KAAK,GAAG,YAAYN,IAAI,CAACK,WAA/B;AACAN,IAAAA,MAAM,CAACQ,OAAP,CAAeC,aAAf,GAAgCF,KAAhC;AACD;;AAED,SAAOP,MAAP;AACD,CATD;;AAWA,MAAMU,cAAN,CAAqB;AACD,QAAZC,YAAY,GAAG;AACnB,WAAO,MAAMf,KAAK,CAACgB,GAAN,CAAU,gBAAV,CAAb,CADmB,CACwB;AAC5C;;AAEe,QAAVC,UAAU,GAAG;AACjB,WAAO,MAAMjB,KAAK,CAACgB,GAAN,CAAU,cAAV,CAAb,CADiB,CACuB;AACzC;;AAEkB,QAAbE,aAAa,GAAG;AACpB,WAAO,MAAMlB,KAAK,CAACgB,GAAN,CAAU,iBAAV,CAAb,CADoB,CACuB;AAC5C;;AAXkB;;AAcrB,eAAe,IAAIF,cAAJ,EAAf","sourcesContent":["import axios from 'axios';\r\n\r\n// Add a request interceptor\r\naxios.interceptors.request.use( config => {\r\n  const user = JSON.parse(localStorage.getItem('user'));\r\n\r\n  if(user && user.accessToken){\r\n    const token = 'Bearer ' + user.accessToken;\r\n    config.headers.Authorization =  token;\r\n  }\r\n\r\n  return config;\r\n});\r\n\r\nclass BackendService {\r\n  async getUserBoard() {\r\n    return await axios.get(\"/api/test/user\");  //return await axios.get(\"/api/test/customer\");\r\n  }\r\n\r\n  async getPmBoard() {\r\n    return await axios.get(\"/api/test/pm\"); //return await axios.get(\"/api/test/company\");\r\n  }\r\n\r\n  async getAdminBoard() {\r\n    return await axios.get(\"/api/test/admin\"); //return await axios.get(\"/api/test/admin\");\r\n  }\r\n}\r\n\r\nexport default new BackendService();"]},"metadata":{},"sourceType":"module"}